<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE appendix
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<appendix xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="app.security.pcidss">
<!-- This chapter is very much WIP and not ready for publication. -->
 <title>SUSE Linux Enterprise Server PCI DSS Guide</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <!-- This chapter is very much WIP and not ready for publication. -->
<!-- <highlights/> -->
<!-- Useful resources:
Positive Research Center (describing PCI-DSS 1.0!)
+ (Part 1) http://blog.ptsecurity.com/2010/07/red-card-specificity-of-pci-dss-in.html
+ (Part 2) http://blog.ptsecurity.com/2010/07/red-card-specificity-of-pci-dss-in_19.html
+ (Part 3) http://blog.ptsecurity.com/2010/08/pci-dss-and-red-hat-enterprise-linux.html
+ (Part 4) http://blog.ptsecurity.com/2010/09/pci-dss-and-red-hat-enterprise-linux.html
+ (Part 5) http://blog.ptsecurity.com/2010/09/pci-dss-and-red-hat-enterprise-linux_03.html
+ (Part 6) http://blog.ptsecurity.com/2010/10/pci-dss-and-red-hat-enterprise-linux.html
+ (Part 7) http://blog.ptsecurity.com/2010/10/pci-dss-and-red-hat-enterprise-linux_20.html
+ (Part 8) http://blog.ptsecurity.com/2010/11/requirement-10-track-and-monitor-all.html
+ (Part 9) http://blog.ptsecurity.com/2010/11/pci-dss-and-red-hat-enterprise-linux.html

NetIQ (for cross-BU promotion) (note that Novell Sentinel was
renamed to NetIQ Sentinel at some point):
+ https://www.netiq.com/industries/federal/regulations-standards-compliance/pci-dss.html

  -->
<sect1>
<title>Introduction</title>
 <para>
  Any company that handles card payments from customers will need to protect their data and keep it as safe and secure as possible. This is on a mutual basis to protect customers and the business itself. For this, it is important to evaluate all aspects of the business environment that are somehow involved in processing cardholder data. The PCI Data Security Standards helps to cover all areas that are somehow part of the process and to implement security relevant actions to keep the data and the environment it relies on save.
 </para>

<para>
  An essential part is the combination of actions. It is not only necessary to
  configure a secure service, it is also important that the configuration
  is not changed afterwards. If something is changed, it is important to keep
  track on who changed what at what point in time. This SUSE security guide
  should give you a basic understanding of how &sle; can be
  configured to comply with the PCI Data Security Standard. Again, it is most important to understand that protecting the systems does not end by the configuration. It is the whole environment and people involved that needs to be taken into account.
</para>
</sect1>

<sect1>
<title>What is PCI DSS?</title>
<para>
The Payment Card Industry Data Security Standard (PCI DSS) is a set of
requirements to guide a merchant to protect credit cardholder data. The
standard covers 6 main categories with currently 12 requirement topics how to
implement, protect, maintain and monitor systems that are involved with credit
cardholder data processing.
</para>

<para>
PCI DSS was created and is maintained by the PCI Security Standards Council
(SSC) that was founded by all five major credit card companies: Visa, MasterCard,
American Express, Discover, and JCB. In December 2004 PCI DSS 1.0 was released
to address the growing threat of online credit card fraud. The current version
3.2 was released in April 2016.
</para>
<itemizedlist>
<listitem>
<para>
  Build and Maintain a Secure Network and Systems
</para>
<itemizedlist>
<listitem>
<para>
  Install and maintain a firewall configuration to protect cardholder data
</para>
</listitem>
<listitem>
<para>
  Do not use vendor-supplied defaults for system passwords and other security parameters
</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>
  Protect Cardholder Data
</para>
<itemizedlist>
<listitem>
<para>
  Protect stored cardholder data
</para>
</listitem>
<listitem>
<para>
  Encrypt transmission of cardholder data across open, public networks
</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>
  Maintain a Vulnerability Management Program
</para>
<itemizedlist>
<listitem>
<para>
  Protect all systems against malware and regularly update anti-virus software or programs
</para>
</listitem>
<listitem>
<para>
  Develop and maintain secure systems and applications
</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>
  Implement Strong Access Control Measures
</para>
<itemizedlist>
<listitem>
<para>
  Restrict access to cardholder data by business need to know
</para>
</listitem>
<listitem>
<para>
  Identify and authenticate access to system components
</para>
</listitem>
<listitem>
<para>
  Restrict physical access to cardholder data
</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>
  Regularly Monitor and Test Networks
</para>
<itemizedlist>
<listitem>
<para>
  Track and monitor all access to network resources and cardholder data
</para>
</listitem>
<listitem>
<para>
  Regularly test security systems and processes
</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>
  Maintain an Information Security Policy
</para>
<itemizedlist>
<listitem>
<para>
  Maintain a policy that addresses information security for all personnel
</para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>

<para>
  Most of the requirements described are organizational guidelines that help to
  ensure the security of all areas involved with cardholder data. The technical
  aspects are usually specified kind of fuzzy. This leads to a situation where
  it is up to the auditor to decide which security setting is valid for a
  requirement and which is not. So the described recommendations in this guide
  are just a starting point to fulfill the PCI DSS and are objects of
  discussion. 
</para>
</sect1>

<sect1>
<title>Areas relevant to the Operating System</title>
<para>
  As PCI DSS  encompasses all aspects related to credit cardholder data, not
  all requirements concern directly the operating system (OS). For example, the running application processing the data and the database design are not directly within the scope of the OS security. Also, formal processes that need to be implemented are not directly related to the OS level.
</para>
<para>
  Relevant are the areas where the OS can be configured to enforce the policies
  described inside the requirements. This applies to system security settings
  and access control as well as system maintenance to protect against known security vulnerabilities.
</para>
</sect1>

<sect1>
<title>Requirements in Detail</title>
<sect2>
<title>Build and Maintain a Secure Network and Systems</title>
<sect3>
<title>Install and maintain a firewall configuration to protect cardholder data</title>
<para>
  The listed terms in this section are mostly design, documentation and formal
  process requirements. All changes to the firewalls and routers are need to be
  approved, documented and verified and all stakeholders need to be
  involved. The network design includes a DMZ environment, access to the
  Internet, a protected network for database servers, traffic filtering rules
  between network segments etc. In addition to a dedicated firewall and router,
  SUSE Linux Enterprise come with a host firewall based on iptables. The system
  can be easily configured to allow only connections on certain inbound
  ports. With the YaST firewall module it is also possible to define more
  complex rules, for instance that connections are only possible from certain
  network addresses. With this the local system firewall should be part of the
  overall firewall design to tighten network security to a maximum.
</para>
<para>
The first technical point in requirement 1 is the identification of insecure
services and protocols. After that it comes down to limiting the traffic to and
from the system to tighten up the boundaries so that unneeded and unwanted
traffic is directly avoided.
</para>
</sect3>

<sect3>
<title>Identify insecure services, protocols, and ports allowed; and verify
that security features are documented for each service</title>
<para>
This task is embedded into the requirement to identify, document and justify all services and protocols running on a system. A special interest are services and protocols that could lead to a security risk. If a certain insecure service or protocol is used it needs to be evaluated and understood how big the security impact could be. A service or protocol that is not for business operation should be disabled or removed.
</para>
</sect3>

<sect3>
<title>Examine firewall and router configurations to verify that inbound and outbound traffic is limited to that which is necessary for the cardholder data environment</title>
<para>
Inbound traffic filtering rules can be directly defined via the YaST firewall
module. Systems with multiple interfaces can be configured in such a way that
for example the ssh daemon is only reachable on the administration interface
and not on the general network card. Furthermore is possible to define the
source addresses that a service allows traffic from.</para>

<para>
Usually all outbound system traffic is generally allowed with the <filename>SuSEfirewall2</filename>
script. Therefore outbound rules need to be defined manually inside the
<filename>SuSEfirewall2-custom</filename> script. The activation of the custom script has to be done
inside the general SuSEfirewall configuration file
<filename>/etc/sysconfig/SuSEfirewall2</filename> by un-commenting the FW_CUSTOMRULES line.
</para>

<para>
To add an outbound rule simply add the needed iptables command inside the fw_custom_after_chain_creation() function. This function hook gets executed during the firewall setup and allows any customized iptables rule.
The following example would only allow outbound DNS requests over interface
eth0 to server 10.0.0.4. Please check the “deny all” OUTPUT rule described in
requirement 1.2.1.c.</para>

<screen>iptables -A OUTPUT -d 10.0.0.4/32 -o eth0 -p udp -m udp --dport 53 -j
ACCEPT</screen>

</sect3>

<sect3>
<title>Examine firewall and router configurations to verify that all other inbound and outbound traffic is specifically denied, for example by using an explicit “deny all” or an implicit deny after allow statement</title>
<para>
The "deny all" rules of other inbound and outbound traffic can easily be achieved with iptables. The INPUT and FORWARD table policies are directly set by the SuSEfirewall2 script so that all unwanted traffic gets droped. (Forwarding is usually completely disabled by a kernel parameter and shouldn't be enabled for endpoint servers.)
</para>

<para>
As mentioned before the OUTPUT policy has to be defined manually inside the
<filename>SuSEfirewall2-custom</filename> script because in general all
outgoing traffic is allowed. The following two rules need to be added to the
fw_custom_after_chain_creation() function so that only outbound traffic that is
related to an established inbound connection is allowed.</para>

<screen>iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT
	iptables -P OUTPUT DROP</screen>

<para>
In addition inbound traffic can also be configured for certain services via the
tcp wrapper configuration file <filename>/etc/hosts.deny</filename>.</para>

<para>
Most of the following tasks are about examine and verifying that the defined
inbound and outbound rules are really limiting the traffic between and within
all network segments, like the DMZ and the Internet, to a needed minimum for
full system operation.
</para>
</sect3>

<sect3>
<title>Implement anti-spoofing measures to detect and block forged source IP addresses from entering the network</title>
<para>
There a two ways to implement anti-spoofing measurements in &sle;. The first
one is the use of iptables rules that only allow input from certain addresses
on specified interfaces. The used address space for communications can be
clearly defined by system setup. Any use of addresses that violate this
definitions can be logged and trigger an alarm. The second way is provided via
the Linux kernel reverse path filtering. The basic concept of this feature is
that if a packet reply wouldn’t go out through the same interface the initial
packet got in, it is treated as a bogus packet and is dropped. This feature is
enabled by default in &sle; and can be check with the following command. This
should give back a 1 when it is enabled.</para>
<screen>cat /proc/sys/net/ipv4/conf/all/rp_filter</screen>
</sect3>

<sect3>
<title>Permit only established connections into the network</title>
<para>
SuSEfirewall2 directly enables connection tracking via iptables. Connections to
an interface that has been marked as external are dropped by default. Only
connections that associated with an established connection are allowed.</para>

<para>
It is possible to define certain services that are allowed to connect to the
external interface. However, this has to be in compliance with the general
security policy.</para>

<para>
Please keep in mind that the first line of defense to block malicious
connections from the internet should be a dedicated firewall system that
handles all traffic and acts as a gate keeper. Unwanted connections should
never reach the DMZ network. However, simple firewall rules on the SUSE Linux
Enterprise systems can help to avoid misconfiguration issues and act as another
line in the defense mechanism.
</para>
</sect3>

<sect3>
<title>Do not disclose private IP addresses and routing information to unauthorized parties</title>
<para>
A &sle; system can also act as a router to forward traffic from one interface
to another network on a second interface. It is possible to use Network Address
Translation (NAT) on the external interface so that no internal IP address is
actually exposed to outside. This is done to mitigate the information an
external attacker can gather by simply analyzing the network traffic. NAT can
also be used on virtulization hosts or container based environments that
connect to the outside via a specific interface.
</para>
</sect3>
</sect2>
</sect1>
</appendix>
